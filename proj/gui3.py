import io
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from PIL import Image, ImageTk
from pathlib import Path

from tkinter import Tk, Canvas, PhotoImage, StringVar, Label
import ttkbootstrap as ttk
from moderator import *

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH_LP = OUTPUT_PATH / Path(r"/Users/stanmerlijn/PycharmProjects/pythonProject4/proj/assets/frame2")
ASSETS_PATH_PC = OUTPUT_PATH / Path(r"C:\Users\smerl\PycharmProjects\StationsZuil\proj\assets\frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH_LP / Path(path)

# function to get the index back from a specific value in a nested list
def find_value_nested_list(nested_list, value):
    for i, inner_list in enumerate(nested_list):
        if value in inner_list:
            return i


# function to display the correct facilities
def change_facilities(ov_bike, elevator, toilet, park_and_ride):

    canvas.itemconfig(elevator_image, state="hidden")
    canvas.itemconfig(ov_bike_image, state="hidden")
    canvas.itemconfig(toilet_image, state="hidden")
    canvas.itemconfig(park_and_ride_image, state="hidden")

    if ov_bike:
        canvas.itemconfig(ov_bike_image,  state="normal")

    if elevator:
        canvas.itemconfig(elevator_image, state="normal")

    if toilet:
        canvas.itemconfig(toilet_image, state="normal")

    if park_and_ride:
        canvas.itemconfig(park_and_ride_image, state="normal")


# function to call and create icon image
def get_weather_icon(icon, large_icon=False):
    url = f"https://openweathermap.org/img/wn/{icon}.png"
    if large_icon:
        url = f"https://openweathermap.org/img/wn/{icon}@2x.png"

    response = requests.get(url)
    if response.status_code == 200:
        # Read the image content
        image_data = response.content
        # Create a PhotoImage from the image data
        img = Image.open(io.BytesIO(image_data))
        return img


# function to change all the weather icons
def change_weather_icons(icons):
    global current_weather_photo
    global forecast_01_photo
    global forecast_02_photo
    global forecast_03_photo
    global forecast_04_photo
    global forecast_05_photo

    current_weather_data = get_weather_icon(icons[0], True)
    current_weather_photo = ImageTk.PhotoImage(current_weather_data)
    canvas.itemconfig(current_weather_image_id, image=current_weather_photo)

    new_01 = get_weather_icon(icons[1])
    forecast_01_photo = ImageTk.PhotoImage(new_01)
    canvas.itemconfig(forecast_01_image_id, image=forecast_01_photo)

    new_02 = get_weather_icon(icons[2])
    forecast_02_photo = ImageTk.PhotoImage(new_02)
    canvas.itemconfig(forecast_02_image_id, image=forecast_02_photo)

    new_03 = get_weather_icon(icons[3])
    forecast_03_photo = ImageTk.PhotoImage(new_03)
    canvas.itemconfig(forecast_03_image_id, image=forecast_03_photo)

    new_04 = get_weather_icon(icons[4])
    forecast_04_photo = ImageTk.PhotoImage(new_04)
    canvas.itemconfig(forecast_04_image_id, image=forecast_04_photo)

    new_05 = get_weather_icon(icons[5])
    forecast_05_photo = ImageTk.PhotoImage(new_05)
    canvas.itemconfig(forecast_05_image_id, image=forecast_05_photo)


# function to format date to abbreviated month and day. time fromatted too hours and minutes
def format_dates(weather_dates):
    formatted_dates = []
    for date in weather_dates:
        split_date = date.split(" ")

        # format the time
        time_obj = datetime.strptime(split_date[1], '%H:%M:%S')
        formatted_time = time_obj.strftime('%H:%M')

        # format the date
        correct_date = datetime.strptime(split_date[0], "%Y-%m-%d")
        formatted_date = datetime.date(correct_date).strftime("%b %d")

        formatted_dates.append((formatted_date, formatted_time))

    return formatted_dates


# function to change the forecast dates and temperature
def change_forecast_data(temp_forecast, weather_dates):

        formatted_dates = format_dates(weather_dates)  # list of formatted time and date

        # displaying temperature and date
        label_forecast_01.config(text=f"{formatted_dates[1][0]}\n{formatted_dates[1][1]}")
        label_temp_01.config(text=f"{temp_forecast[1]:.0f}°C")

        label_forecast_02.config(text=f"{formatted_dates[2][0]}\n{formatted_dates[2][1]}")
        label_temp_02.config(text=f"{temp_forecast[2]:.0f}°C")

        label_forecast_03.config(text=f"{formatted_dates[3][0]}\n{formatted_dates[3][1]}")
        label_temp_03.config(text=f"{temp_forecast[3]:.0f}°C")

        label_forecast_04.config(text=f"{formatted_dates[4][0]}\n{formatted_dates[4][1]}")
        label_temp_04.config(text=f"{temp_forecast[4]:.0f}°C")

        label_forecast_05.config(text=f"{formatted_dates[5][0]}\n{formatted_dates[5][1]}")
        label_temp_05.config(text=f"{temp_forecast[5]:.0f}°C")


# function to change all data to that of the station selected in the combobox
def change_geo_data(list_stations):

    # getting station data from lat, lon
    station = current_station.get()
    stations_index = find_value_nested_list(list_stations, station)
    station_data = list_stations[stations_index]

    city_name, country, ov_bike, elevator, toilet, park_and_ride, lat, lon = station_data

    # display the correct facilities
    change_facilities(ov_bike, elevator, toilet, park_and_ride)

    temp_forecast, weather, wind, icons, weather_dates = get_current_weather(lat, lon)

    # change the current weather data
    label_wind.config(text=f"wind: {wind}m/s")
    label_weather.config(text=f"{weather}")
    label_temp.config(text=f"{temp_forecast[0]:.0f} °C")

    # displaying the forecast data
    change_weather_icons(icons)
    change_forecast_data(temp_forecast, weather_dates)

    # changing the weather header
    label_city.config(text=f"{city_name}, {country}")

    set_city(current_station.get())
    display_latest_messages_station(canvas, cursor, 600, 165)


conn = connect_to_db()
cursor = conn.cursor()

stations_data = get_stations_data(cursor)
stations = [sublist[0] for sublist in stations_data]

window3 = Tk()

window3.geometry("960x540")
window3.configure(bg="#E6E6E9")
style = ttk.Style()
style.load_user_themes("user.json")
style = ttk.Style(theme="nscolors2")


canvas = Canvas(
    window3,
    bg="#E6E6E9",
    height=540,
    width=960,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

canvas.create_rectangle(
    0.0,
    41.0,
    960.0,
    171.0,
    fill="#FFC917",
    outline="")

canvas.create_rectangle(
    55.0,
    116.0,
    465.0,
    232.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    498.0,
    113.0,
    908.0,
    526.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    55.0,
    252.0,
    465.0,
    526.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    541.0,
    146.0,
    876.0,
    493.0,
    fill="#CDCDD3",
    outline=""
)


canvas.create_text(
    541.0,
    123.0,
    anchor="nw",
    text="messages",
    fill="#003082",
    font=("Open Sans Bold", 11 * -1)
)

label_city = Label(
    anchor="nw",
    text="Arnhem, NL",
    font=("Open Sans Bold", 11 * -1)
)
label_city.place(x=87.0, y=260.0)
label_city.config(fg="#003082", bg="#FFFFFF")

canvas.create_text(
    86.0,
    123.0,
    anchor="nw",
    text="facilities",
    fill="#003082",
    font=("Open Sans Bold", 11 * -1)
)

label_weather = Label(
    anchor="nw",
    text="Heavy rain",
    font=("Open Sans Bold", 11 * -1)
)
label_weather.place(x=87.0, y=435.0)
label_weather.config(fg="#000000", bg="#FFFFFF")


label_temp = Label(
    anchor="nw",
    text="",
    font=("Open Sans Bold", 25 * -1)
)
label_temp.place(x=86.0, y=316.0,)
label_temp.config(fg="#000000", bg="#FFFFFF")

label_wind = Label(
    anchor="nw",
    text="Wind: 4.6m/s gentle breez",
    font=("Open Sans Bold", 9 * -1)
)
label_wind.place(x=87.0, y= 451.0)
label_wind.config(fg="#000000", bg="#FFFFFF")

canvas.create_rectangle(
    0.0,
    0.0,
    960.0,
    45.0,
    fill="#FFFFFF",
    outline=""
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    90.0,
    22.0,
    image=image_image_1
)

label_time = ttk.Label(
    anchor="nw",
    text="",
    foreground="#003082",
    background="#ffffff",
    font=("Open Sans Bold", 12 * -1)
)
label_time.place(x=512.0, y=15.0)

label_date = ttk.Label(
    anchor="nw",
    text="",
    foreground="#003082",
    background="#ffffff",
    font=("Open Sans Bold", 12 * -1)
)
label_date.place(x=420.0, y=15.0)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

current_station = StringVar(value=stations[0])

station_button = ttk.Combobox(
    textvariable=current_station
)
station_button.place(
    x=376.0,
    y=68.0,
    width=199.8000030517578,
    height=25.0
)
station_button["values"] = stations

station_button.bind("<<ComboboxSelected>>", lambda event: change_geo_data(stations_data))

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
elevator_image = canvas.create_image(
    222.0,
    171.0,
    image=image_image_2,
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
park_and_ride_image = canvas.create_image(
    156.0,
    171.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
toilet_image = canvas.create_image(
    354.0,
    171.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
ov_bike_image = canvas.create_image(
    288.0,
    171.0,
    image=image_image_5
)

# image_image_6 = PhotoImage(
#     file=relative_to_assets("image_6.png"))
# image_6 = canvas.create_image(
#     124.0,
#     389.0,
#     image=image_image_6
# )

current_weather_data = get_weather_icon("10d")
current_weather_photo = ImageTk.PhotoImage(current_weather_data)
current_weather_image_id = canvas.create_image(
    124.0,
    389.0,
    image=current_weather_photo
)

label_forecast_01 = ttk.Label(
    window3,
    anchor="nw",
    text="today\n3 nov",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_forecast_01.place(x=321.0, y=292.0)

label_temp_01 = ttk.Label(
    window3,
    anchor="nw",
    text="12321",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_temp_01.place(x=400.0, y=292.0)


label_forecast_02 = ttk.Label(
    window3,
    anchor="nw",
    text="today\n3 nov",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_forecast_02.place(x=321.0, y=336.0)

label_temp_02 = ttk.Label(
    window3,
    anchor="nw",
    text="12321",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_temp_02.place(x=400.0, y=336.0)

label_forecast_03 = ttk.Label(
    window3,
    anchor="nw",
    text="today\n3 nov",
    foreground="#070721",
    background="#ffffff",
    font=("Open Sans SemiBold", 9 * -1)
)
label_forecast_03.place(x=321.0, y=382.0)

label_temp_03 = ttk.Label(
    window3,
    anchor="nw",
    text="12321",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_temp_03.place(x=400.0, y=382.0)

label_forecast_04 = ttk.Label(
    window3,
    anchor="nw",
    text="today\n3 nov",
    foreground="#070721",
    background="#ffffff",
    font=("Open Sans SemiBold", 9 * -1)
)
label_forecast_04.place(x=321.0, y=425.0)

label_temp_04 = ttk.Label(
    window3,
    anchor="nw",
    text="12321",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_temp_04.place(x=400.0, y=425.0)

label_forecast_05 = ttk.Label(
    window3,
    anchor="nw",
    text="today\n3 nov",
    foreground="#070721",
    background="#ffffff",
    font=("Open Sans SemiBold", 9 * -1)
)
label_forecast_05.place(x=321.0, y=470)

label_temp_05 = ttk.Label(
    window3,
    anchor="nw",
    text="12321",
    foreground="#070721",
    background="#FFFFFF",
    font=("Open Sans SemiBold", 9 * -1)
)
label_temp_05.place(x=400.0, y=470)

forecast_01_data = get_weather_icon("10d")
forecast_01_photo = ImageTk.PhotoImage(forecast_01_data)
forecast_01_image_id = canvas.create_image(
    372.0,
    300.0,
    image=forecast_01_photo
)

forecast_02_data = get_weather_icon("10d")
forecast_02_photo = ImageTk.PhotoImage(forecast_02_data)
forecast_02_image_id = canvas.create_image(
    372.0,
    345.0,
    image=forecast_02_photo
)

forecast_03_data = get_weather_icon("10d")
forecast_03_photo = ImageTk.PhotoImage(forecast_03_data)
forecast_03_image_id = canvas.create_image(
    372.0,
    390.0,
    image=forecast_03_photo
)

forecast_04_data = get_weather_icon("10d")
forecast_04_photo = ImageTk.PhotoImage(forecast_04_data)
forecast_04_image_id = canvas.create_image(
    372.0,
    435.0,
    image=forecast_04_photo
)

forecast_05_data = get_weather_icon("10d")
forecast_05_photo = ImageTk.PhotoImage(forecast_05_data)
forecast_05_image_id = canvas.create_image(
    372.0,
    480.0,
    image=forecast_05_photo
)

canvas.create_rectangle(
    86.0,
    285.0,
    296.0,
    289.0,
    fill="#FFC917",
    outline=""
)

window3.bind('<KeyPress-Escape>', lambda event: window3.destroy())

display_clock(label_time, window3, "%H:%M:%S", 1000)
display_date(label_date, window3, "%B %d", 1000)
set_city(current_station.get())
display_latest_messages_station(canvas, cursor, 600, 165)

change_geo_data(stations_data)
window3.resizable(False, False)
window3.mainloop()

cursor.close()
conn.close()
