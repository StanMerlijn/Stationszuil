# This file was generated by the tk Designer by Parth Jadhav
# https://github.com/ParthJadhav/tk-Designer
import tkinter
from pathlib import Path
from tkinter import Tk, Canvas, Entry, Button, PhotoImage, StringVar, IntVar
from input_text import *
from moderator import get_new_messages, initialize_data_gui, display_latest_messages
import ttkbootstrap as ttk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH_LP = OUTPUT_PATH / Path(r"/Users/stanmerlijn/PycharmProjects/pythonProject4/proj/assets/frame1")
ASSETS_PATH_PC = OUTPUT_PATH / Path(r"C:\Users\smerl\PycharmProjects\StationsZuil\proj\assets\frame1 ")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH_LP / Path(path)


conn = connect_to_db()
cursor = conn.cursor()

lines_index = -1
messages = get_new_messages(cursor)


def button_approve_action():
    global lines_index
    send_data_mod("approved", cursor, conn)

    bool_is_data = get_data()[0]
    if not bool_is_data:  # If no valid data, exit the function
        return
    next_message(messages)  # Move to the next message


def button_reject_action():
    global lines_index
    send_data_mod("not approved", cursor, conn)

    bool_is_data = get_data()[0]
    if not bool_is_data:  # If no valid data, exit the function
        return
    next_message(messages)  # Move to the next message


def next_message(messages):
    global lines_index
    lines_index += 1  # Move to the next message.

    if lines_index < len(messages):
        name_var.set(messages[lines_index][0])
        message_var.set(messages[lines_index][1])


def get_data():
    mod_email = entry_email.get()
    mod_name = entry_name.get()

    canvas.itemconfig(error_name, text="")
    canvas.itemconfig(error_email, text="")

    empty_return = False, None, None

    # displays message if no name is given.
    if mod_name == "":
        canvas.itemconfig(error_name, text="Name cannot be empty!")

    # displays message if entry message is empty.
    if mod_email == "":
        canvas.itemconfig(error_email, text="email cannot be empty!")

    # displays message if there is no @ in email
    if "@" not in mod_email:
        canvas.itemconfig(error_email, text="Email must contain @!")

    # if the data fields are not empty it will return them.
    if mod_email == "\n" or mod_name == "" or "@" not in mod_email:
        return empty_return

    return True, mod_name, mod_email  # Return valid data if both fields are not empty.


def send_data_mod(approval, cursor, conn):
    bool_is_data, mod_name, mod_email = get_data()
    mod_data = approval, mod_name, mod_email
    try:
        if bool_is_data:
            message_id = messages[lines_index][2]
            initialize_data_gui(cursor, mod_data, message_id)
    except IndexError as e:
        message_var.set("there are no messages to moderate")
        name_var.set("")
        print(f"error: {e}")
        return
    conn.commit()


window2 = Tk()
window2.title("NS moderator")
window2.geometry("960x540")
style = ttk.Style()
style.load_user_themes("user.json")
style = ttk.Style(theme="nscolors2")

canvas = Canvas(
    window2,
    bg="#E6E6E9",
    height=540,
    width=960,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

canvas.create_rectangle(
    0.0,
    41.0,
    960.0,
    171.0,
    fill="#FFC917",
    outline=""
)

canvas.create_rectangle(
    55.0,
    81.0,
    905.0,
    540.0,
    fill="#FFFFFF",
    outline=""
)
message_block = canvas.create_rectangle(
    500.0,
    135.0,
    819.0,
    455.0,
    fill="#F0F0F2",
    outline=""
)

canvas.create_text(
    141.0,
    162.0,
    anchor="nw",
    text="email",
    fill="#003082",
    font=("Open Sans Semibold", 11 * -1)
)

canvas.create_text(
    112.0,
    277.0,
    anchor="nw",
    text="message by",
    fill="#003082",
    font=("Open Sans Semibold", 11 * -1)
)

canvas.create_text(
    127.0,
    330.0,
    anchor="nw",
    text="message",
    fill="#003082",
    font=("Open Sans Semibold", 11 * -1)
)

error_name = canvas.create_text(
    202.0,
    138.0,
    anchor="nw",
    text="",
    fill="#DB0029",
    font=("OpenSansRoman Light", 9 * -1)
)

error_email = canvas.create_text(
    202.0,
    188.0,
    anchor="nw",
    text="",
    fill="#DB0029",
    font=("OpenSansRoman Light", 9 * -1)
)

message_var = StringVar()
message = ttk.Label(
    anchor="nw",
    text="",
    background="#ffffff",
    textvariable=message_var,
    wraplength=250,
    font=("Open Sans Regular", 11 * -1)
)
message.place(x=202.0, y=331.0)

canvas.create_text(
    500.0,
    106.0,
    anchor="nw",
    text="Moderated messages",
    fill="#003082",
    font=("Open Sans Bold", 14 * -1)
)

name_var = StringVar()
name_user = ttk.Label(
    anchor="nw",
    text="not defined ",
    background="#ffffff",
    textvariable=name_var,
    font=("Open Sans Regular", 11 * -1)
)
name_user.place(x=202.0, y=276.0)
canvas.create_text(
    141.0,
    112.0,
    anchor="nw",
    text="name\n",
    fill="#003082",
    font=("Open Sans Semibold", 11 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_exit = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: window2.destroy(),
    relief="flat"
)
button_exit.place(
    x=760.0,
    y=475.0,
    width=60.0,
    height=33.0
)
approval_var = IntVar(value=1)
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_approve = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    textvariable=approval_var,
    command=button_approve_action,
    relief="flat"
)
button_approve.place(
    x=202.0,
    y=473.0,
    width=90.0,
    height=33.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_reject = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=button_reject_action,
    relief="flat"
)
button_reject.place(
    x=324.0,
    y=473.0,
    width=90.0,
    height=33.0
)

canvas.create_rectangle(
    0.0,
    0.0,
    960.0,
    45.0,
    fill="#FFFFFF",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    90.0,
    22.0,
    image=image_image_1
)

label_date = ttk.Label(
    anchor="nw",
    text="",
    foreground="#003082",
    background="#ffffff",
    font=("Open Sans Bold", 12 * -1)
)
label_date.place(x=420.0, y=12.0,)

label_time = ttk.Label(
    anchor="nw",
    text="",
    foreground="#003082",
    background="#ffffff",
    font=("Open Sans Bold", 12 * -1)
)
label_time.place(x=512.0, y=12.0,)

canvas.create_text(
    202.0,
    222.0,
    anchor="nw",
    text="message to moderate",
    fill="#003082",
    font=("Open Sans Bold", 14 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    298.9000015258789,
    118.5,
    image=entry_image_1
)
name_mod_var = StringVar()
entry_name = Entry(
    bd=0,
    bg="#F0F0F2",
    background="#F0F0F2",
    fg="#000716",
    textvariable=name_mod_var,
    highlightthickness=0
)
entry_name.place(
    x=199.60000002384186,
    y=106.0,
    width=198.6000030040741,
    height=23.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    301.9000015258789,
    168.5,
    image=entry_image_2
)
email_mod_var = StringVar()
entry_email = Entry(
    bd=0,
    bg="#F0F0F2",
    fg="#000716",
    textvariable=email_mod_var,
    highlightthickness=0
)
entry_email.place(
    x=199.60000002384186,
    y=156.0,
    width=198.6000030040741,
    height=23.0
)
window2.bind('<KeyPress-Escape>', lambda event: window2.destroy())

display_clock(label_time, window2, "%H:%M:%S", 1000)
display_date(label_date, window2, "%B %d", 1000)
display_latest_messages(canvas, 5, cursor, 540, 155)

next_message(messages)
window2.resizable(False, False)
window2.mainloop()

cursor.close()
conn.close()
